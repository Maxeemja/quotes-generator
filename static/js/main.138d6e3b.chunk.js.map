{"version":3,"sources":["services/service.js","hooks/http.hook.js","components/spinner/1488.gif","components/spinner/Spinner.js","components/quotesList/quotesList.js","components/appHeader/appHeader.js","components/quoteBlock/quoteBlock.js","components/footer/footer.js","components/app/App.js","index.js"],"names":["useQuoteService","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","useHttp","_apiBase","getRandomQuote","res","_transformData","getQuoteList","name","results","map","quote","id","content","author","slug","authorSlug","tags","toString","replace","Spinner","style","src","spinner","alt","QuotesList","loading","setLoading","useState","quotes","setQuotes","setName","useParams","useEffect","then","onListLoaded","undefined","className","hidden","arr","items","item","i","renderItems","withRouter","updateQuote","location","to","onClick","pathname","QuoteBlock","Footer","href","App","setQuote","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.138d6e3b.chunk.js","sourcesContent":["import { useHttp } from \"../hooks/http.hook\"\r\n\r\nexport const useQuoteService = () => {\r\n    const {request} = useHttp();\r\n\r\n\r\n    const _apiBase = 'https://api.quotable.io/';\r\n    const getRandomQuote = async () => {\r\n        const res = await request(`${_apiBase}random`);\r\n        return _transformData(res);\r\n    }\r\n    const getQuoteList = async (name) => {\r\n        const res = await request(`${_apiBase}quotes?author=${name}`);\r\n        return res.results.map(_transformData);    \r\n    }\r\n    \r\n    const _transformData = (quote) => {\r\n        return {\r\n            id: quote.id,\r\n            content: quote.content,\r\n            author: quote.author,\r\n            slug: quote.authorSlug,\r\n            tags: quote.tags.toString().replace(',', ' , ')\r\n        }\r\n    }\r\n\r\n    return {getRandomQuote, getQuoteList}\r\n}\r\n","import { useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if(!response.ok) {\r\n                throw new Error (`ERROR! status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch(e) {\r\n            throw e;\r\n        }\r\n        \r\n    }, []);\r\n    \r\n\r\n    return {request}\r\n}","export default __webpack_public_path__ + \"static/media/1488.372b42cf.gif\";","import spinner from './1488.gif';\r\nconst Spinner = () => {\r\n    return (\r\n        <div style={{'margin': '0 auto', 'display': 'flex', 'justifyContent': 'center'}}>\r\n            <img src={spinner} alt=\"spinner\"  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import './quotesList.scss';\r\nimport { useQuoteService } from '../../services/service';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Spinner from '../spinner/Spinner';\r\nconst QuotesList = ({loading, setLoading}) => {\r\n    const [quotes, setQuotes] = useState([]);\r\n    const [name, setName] = useState('');\r\n    let { slug } = useParams();\r\n    const {getQuoteList} = useQuoteService();\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getQuoteList(slug)\r\n            .then(onListLoaded)    \r\n    }, []);\r\n\r\n    const onListLoaded = (data) => {\r\n        setLoading(false);\r\n        setQuotes(data);\r\n        if(data[0].author !== undefined){\r\n            setName(data[0].author);\r\n        }\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((item, i) => {\r\n            return (\r\n                <div className=\"quotes__list-item\" key={i}>\r\n                    <div className=\"quote__block-divider\"></div>\r\n                    <div className=\"quotes__list-item-text\">{`\"${item.content}\"`}</div>  \r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <>\r\n                \r\n                <div className=\"quotes__list\">\r\n                    {items}\r\n                </div>\r\n            </>\r\n            \r\n        )\r\n    }\r\n    return(\r\n        <>\r\n            <div className=\"quote__author-name big\" hidden={loading}>{name}</div>\r\n            {loading ? <Spinner/> : renderItems(quotes)}\r\n        </>\r\n    )\r\n}\r\nexport default QuotesList;\r\n","import './appHeader.scss';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nconst AppHeader = ({updateQuote, location}) => {\r\n    return (\r\n        <header>\r\n            <Link to=\"/quotes-generator\">\r\n                <div \r\n                    className=\"rnd-btn\" \r\n                    onClick={location.pathname === '/quotes-generator' ? () => updateQuote() : null}>random<i className=\"fas fa-sync-alt\"></i></div>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\nexport default withRouter(AppHeader);","import { useEffect } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport './quoteBlock.scss';\r\nimport { Link } from 'react-router-dom';\r\nconst QuoteBlock = ({quote, updateQuote, loading}) => { \r\n    useEffect(() => {\r\n        updateQuote();\r\n    }, [])\r\n    \r\n    return (\r\n        <div className=\"quote__block\">\r\n            <div className=\"quote__block-divider\"></div>\r\n            {loading ? <Spinner/> : <div className=\"quote__block-quote\">{`\"${quote.content}\"`}</div>}\r\n            <div></div>\r\n            <Link to={`/quotes-generator/${quote.slug}`}>\r\n                <div className=\"quote__author\" hidden={loading}>\r\n                    <div className=\"quote__author-name\">{quote.author}</div>\r\n                    <span className=\"quote__author-arrow\"><i className=\"fas fa-long-arrow-alt-right\"></i></span>\r\n                    <div className=\"quote__author-tag\">{quote.tags}</div>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\nexport default QuoteBlock;","import './footer.scss';\r\nconst Footer = () => {\r\n        return(\r\n            <footer>Created by <a href=\"https://github.com/Maxeemja\">Maxeemja</a> - devChallenges.io</footer>\r\n        )\r\n}\r\nexport default Footer;","import { useState } from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport { useQuoteService } from '../../services/service';\nimport QuotesList from \"../quotesList/quotesList\";\nimport AppHeader from \"../appHeader/appHeader\";\nimport QuoteBlock from \"../quoteBlock/quoteBlock\";\nimport Footer from '../footer/footer';\nconst App = () => {\n    const [quote, setQuote] = useState({});\n    const [loading, setLoading] = useState(true);\n    const {getRandomQuote} = useQuoteService();\n    const updateQuote = () => {\n        setLoading(true);\n        getRandomQuote()\n            .then((data) => {\n                setLoading(false);\n                setQuote(data);\n            })    \n    }\n\n    return (\n        <Router>\n            <div className=\"app\">\n                <AppHeader updateQuote={updateQuote}/>\n                <main>\n                    <Switch>\n                        <Route path=\"/quotes-generator\" exact>\n                            <QuoteBlock \n                                quote={quote}\n                                updateQuote={updateQuote}\n                                loading={loading}/>\n                        </Route>\n                        <Route path=\"/quotes-generator/:slug\">\n                            <QuotesList\n                                loading={loading}\n                                setLoading={setLoading}\n                            />\n                        </Route>\n                    </Switch>\n                </main>\n                <Footer/>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app/App';\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}